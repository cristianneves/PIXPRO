# Porta em que o nosso API Gateway irá rodar. Esta será a porta principal da nossa aplicação.
server:
  port: 8080

# Nome do serviço para registro no Eureka
spring:
  main:
    web-application-type: reactive
  application:
    name: api-gateway

  # Configuração do Spring Cloud Gateway
  cloud:
    gateway:
      # Habilita a integração com o Discovery Server (Eureka)
      discovery:
        locator:
          enabled: true
          lower-case-service-id: true # Converte o nome do serviço para minúsculas

      # Lista de regras de roteamento
      routes:
        # Rota para o serviço de autenticação
        - id: auth-service-route
          # Destino: 'lb' significa 'load balancer'. O Gateway vai perguntar ao Eureka
          # onde está o serviço com o nome 'auth-service'.
          uri: lb://auth-service
          # Predicado (condição): Se a URL da requisição começar com /api/auth/
          predicates:
            - Path=/api/auth/**

        # Rota para o serviço de projetos
        - id: project-service-route
          # Destino: Busca pelo 'project-service' no Eureka
          uri: lb://project-service
          # Predicado (condição): Se a URL da requisição começar com /api/projects/
          predicates:
            - Path=/api/projects/**

# Configuração do cliente Eureka para que o Gateway possa se registrar e encontrar outros serviços
eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/
    fetch-registry: true
    register-with-eureka: true
  instance:
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 10

# Adicione esta seção no final do arquivo
logging:
  level:
    org.springframework.cloud.gateway: TRACE
    org.springframework.http.server.reactive: DEBUG
    org.springframework.web.reactive: DEBUG
    reactor.netty.http.client: DEBUG