# Nome único que este serviço terá no Eureka
spring.application.name=auth-service

# Vamos definir uma porta diferente para este serviço para não dar conflito com o Eureka
server.port=8081

# O endereço do nosso Servidor Eureka. É assim que ele sabe onde se registrar.
eureka.client.service-url.defaultZone=http://localhost:8761/eureka/

# ===============================================
# CONFIGURAÇÃO DO BANCO DE DADOS (POSTGRESQL)
# ===============================================

# URL de conexão com o banco. Altere 'pixpro_auth_db' se o nome do seu banco for diferente.
spring.datasource.url=jdbc:postgresql://localhost:5432/pixpro_auth_db

# Usuário do banco de dados
spring.datasource.username=postgres

# Senha do banco de dados (ajuste se a sua for diferente)
spring.datasource.password=admin

# ===============================================
# CONFIGURAÇÃO DO HIBERNATE (JPA)
# ===============================================

# Dialeto específico do PostgreSQL para o Hibernate se comunicar corretamente.
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

# Ação a ser tomada no banco ao iniciar a aplicação:
# 'update' -> atualiza o schema (tabelas, colunas, etc.) com base nas suas entidades Java.
# 'create-drop' -> cria tudo do zero ao iniciar e apaga tudo ao finalizar (ótimo para testes).
# 'validate' -> apenas valida se as tabelas correspondem às entidades.
# 'none' -> não faz nada.
spring.jpa.hibernate.ddl-auto=update

# Mostra no console os comandos SQL que o Hibernate está executando. Ótimo para debug.
spring.jpa.show-sql=true

# ===============================================
# CONFIGURAÇÃO DO JWT
# ===============================================
jwt.secret.key=a2a6293f7f22f87a87c061b52a201c8286add5f7a083f2a3f7f87c061b52a201

# ===============================================
# CONFIGURAÇÃO DO ADMIN INICIAL
# ===============================================
admin.email=admin@admin.com
admin.password=admin